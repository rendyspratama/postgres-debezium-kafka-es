services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
       # Add these environment variables
      POSTGRES_INITDB_ARGS: "--wal-segsize=64"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Add a custom config volume
      - ./postgres/conf:/etc/postgresql/conf.d
    command: 
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=4"
      - "-c"
      - "max_replication_slots=4"
      - "-c"
      - "max_connections=200"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:8.16.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Disable security for testing
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green'"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      app-network:
        aliases:
          - elasticsearch.local

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.5
    container_name: digital-discovery-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.6.5
    container_name: digital-discovery-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: digital-discovery-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: digital-discovery
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      SERVER_SERVLET_CONTEXT_PATH: /
    networks:
      - app-network

  # Kafka Connect for Elasticsearch sink
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.6.5
    container_name: kafka-connect
    ports:
      - "8083:8083"
    volumes:
      - ./docker/connect:/usr/share/confluent-hub-components/confluentinc-kafka-connect-elasticsearch
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
    depends_on:
      - kafka
      - elasticsearch
    networks:
      - app-network

  # Debezium for PostgreSQL source
  debezium:
    image: debezium/connect:2.3.4.Final
    container_name: debezium
    ports:
      - "8084:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:29092"
      GROUP_ID: "debezium-connect-group"
      CONFIG_STORAGE_TOPIC: "debezium-connect-configs"
      OFFSET_STORAGE_TOPIC: "debezium-connect-offsets"
      STATUS_STORAGE_TOPIC: "debezium-connect-status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    depends_on:
      - kafka
      - postgres
    networks:
      - app-network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-digital_discovery}?sslmode=disable
      ELASTICSEARCH_URL: http://elasticsearch:9200
      PORT: ${API_PORT:-8081}

  sync:
    build:
      context: ./sync
      dockerfile: Dockerfile
    container_name: sync
    depends_on:
      - kafka
      - elasticsearch
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-digital_discovery}?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      ELASTICSEARCH_URL: http://elasticsearch:9200

  migrate:
    image: migrate/migrate:v4.16.2
    container_name: migrate
    volumes:
      - ./scripts/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-digital_discovery}?sslmode=disable", "up"]
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data: